服务注册于发现 Eureka
服务负载与调用 Netflix OSS / Ribbon / Netflix Feign
服务熔断降级   Hystrix
服务网管      Netflix OSS / Zuul
服务分布式配置 Spring cloud config
服务开发      Spring boot


服务注册中心:
1, Eureka ===> Stop update
2, ZooKeeper
3, Consul
4, Nacos
========================================================================================================================
1, 服务调用
Spring Cloud 封装了 Netflix 公司开发的 Eureka 模块来实现服务治理, 可以实现服务调用，负载均衡，容错。实现服务发现与注册

2, 服务注册
Eureka Server 提供服务注册服务, 就像工业园区管理中心，每个公司（微服务节点注册）。这样 Eureka Server 的服务注册表将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到
Eureka Client 客户端同时也具备一个内置的，使用轮询 (round-robin) 负载算法的负载均衡器。服务启动后，将向 server 发送心跳，如果 server 在多个心跳周期内没有接收到某个节点的心跳，server 就会在服务注册表中把这个服务节点移除

3, 服务发现
对于注册进 Eureka 里面的微服务，可以通过服务发现来获得该服务的信息
========================================================================================================================

========================================================================================================================
ZooKeeper 系列编
Zookeeper 其实和 Eureka 一样是属于服务注册中心的系列。不同的是， Eureka 的服务器是嵌入到 Spring boot 里面的，而 Zookeeper 是个独立的服务器。

在这个系列里面，包含 3 个组建:
1) ZooKeeper 的独立服务器。
2) cloud-provider-payment8004 | cloud-provider-payment8005
3) cloud-consumerzk-order80

Mapping-1) 建立独立服务器：
1, 在 https://zookeeper.apache.org/releases.html 下载的
2, 下载完后，解压缩。
3, 然后创建 /conf/zoo.cfg 文件，内容如下：
```
tickTime = 2000
dataDir = /home/vincent/software/zookeeper-3.4.9/data
clientPort = 2181
initLimit = 5
syncLimit = 2
```
4, 顺带建立 /data 文件
5, 启动服务器 bin/zkServer.sh start
6, 启动客户端 bin/zkCli.sh -server 127.0.0.1:2181

PS: 在客户端运行如下的知识点：
A==> [ls xxx] 发现节点。如果有 1 服务端进来注册的话，会有多 1 个节点，然后节点之下还有节点，可以不断地访问，例如：
[zk: localhost:2181(CONNECTED) 7] ls /services/cloud-provider-payment
[3d14d10c-a577-4ad6-8f61-b8d453e4b4e2]
直到上面的最后上面的流水号，代表的是 cloud-provider-payment 下的其中一个 node

B==> 渠道流水单号以后，就这样做:
get /services/cloud-provider-payment/3d14d10c-a577-4ad6-8f61-b8d453e4b4e2 这个其实是获取叶子节点的信息。一个叶子节点，代表一个 server node

[zk: localhost:2181(CONNECTED) 2] ls /services/cloud-provider-payment
[ca3bb75a-f034-4a74-a661-c3abde6785e4, 3d14d10c-a577-4ad6-8f61-b8d453e4b4e2]


Mapping-2) cloud-provider-payment8004 | cloud-provider-payment8005 其实和 Eureka 差不多，参考就可以了
Mapping-3) cloud-consumerzk-order80 其实和 Eureka 差不多，参考就可以了

========================================================================================================================
consul 的安装和运行
安装很简单，上官网
https://learn.hashicorp.com/tutorials/consul/get-started-install


运行命令：
consul agent -dev

启动完后进入自带的网页：
http://localhost:8500/ui/dc1/services

涉及到的项目：
cloud-providerconsul-payment8006
========================================================================================================================
CAP 的理论核心：
一个分布式系统不可能同时满足一致性(C), 可用性(A) 和分区容错性(P)

AP: Eureka
CP: ZooKeeper, Consul

对于zookeeper和Consul, 一次失效马上删除, 所以没有高可用性
========================================================================================================================

Ribbon
Ribbon 是一个 load balance 的小工具。 Ribbon 和 NGINX 都是 load balancer, 但是 Ribbon 是用于客户端的， NGINX 是用于服务器端的
其实 Eureka 的 client 就已经自带 Ribbon
Ribbon 主要是有几条 Rule, 列表如下：

1, BestAvailableRule
2, RandomRule
3, RetryRule
4, RoundRobinRule (default)
5, WeightedResponseTimeRule
6, ZoneAvoidanceRule
7, StickyRule (只返回一个实例)

当然，也可以自己写一个 RULE
========================================================================================================================
Open FeignL 声明式接口

就是替代 Ribbon + RestTemplate 的一种方案。是使用在客户端的。

主要原则就是：
1) 客户端 Controller 还是那个 controller
2) 客户端 controller 调用的 service 和 服务器端调用的 service 是同样的，但是会加上 @GetMapping
3) 客户端的 service 相关类要加上 @FeignClient(value = "CLOUD-PAYMENT-SERVICE")
4) 客户端的主 SpringBoot 类要加上 @EnableFeignClients
5) Open Feign 默认只等待 1 秒，所以要设置, 也可以定义 log 的级别
========================================================================================================================
Hystrix
1) Hystrix，可以放在客户端，也可以放在服务器端。如果客户端使用了，就一定要有 fallback
2) 如果客户端使用了，那么是无法获的服务器端的出错 fallback 信息的, 会被覆盖
3) 对于 service 端，使用 @FeignClient(value = "CLOUD-PROVIDER-HYSTRIX-PAYMENT" ,fallback = PaymentFallbackService.class)
4) 也可以在 controller endpoint 级别使用 fallback
5) @DefaultProperties(defaultFallback = "payment_Global_FallbackMethod") global level 级别的

对于 Priority, 3) > 4) > 5)


熔断，像保险丝一样，跳闸。然后重新恢复使用
@HystrixCommand(fallbackMethod = "paymentCircuitBreaker_fallback", commandProperties = {
        @HystrixProperty(name = "circuitBreaker.enabled", value = "true"),// 是否开启断路器
        @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value = "10"),// 请求次数, 以最近10秒为一个单位
        @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds", value = "10000"), // 时间窗口期，在 10 秒后再重连
        @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage", value = "60"),// 失败率达到多少后跳闸，10秒里面有60% 是失败的话
})

Hystrix dashboard

http://localhost:9001/hystrix

========================================================================================================================

Gateway 其实是个路由器，里面有三个重要的概念：
1）路由器，直接连接到 Eureka, 定义 id, path等
2) 断言(predicate)，断言包括很多种，包括 before, after, between, path, cookie, header 等
3) 过滤器(filter)，有很多种，也可以自己自行写一个

========================================================================================================================

Spring-Cloud-Config
如果我有三个，四个，十个同样的 payment service, 是不是要逐个更改 mysql server 的属性呢？不应该，这就是为什么 spring cloud config 的由来
这个分为服务器端和客户端。服务器端直接读取 git 上面的 repository, 然后进行配置就行了。

至于客户端，要使用bootstrap.yml， 为什么呢？因为bootstrap.yml比application.yml更高级，直接从外面读取，例如在这个例子里面，就是从git读取yml 文件再获取项目属性的，相当与在git 读取application.yml。
记得，每次更新git，都要求维护人对着客户端发送下面的 request
curl -X POST localhost:3355/actuator/refresh

那么问题又来了，如果我有10个 spring cloud config client, 那么是不是应该发送一百次上面的那个信息的呢？ 那就要使用 spring cloud bus 了
========================================================================================================================

Spring Cloud Bus

目前只支持两种消息代理： RabbitMQ 和 Kafka。在服务器端和客户端加了对 RabbitMQ 的支持以后，就不用再发送上面的了 Request ，因为上面的是逐个发到客户端的，但是这个是直接发到服务器端的

使用了内置的Rabbit MQ 以后，就可以一次推送，所有客户端都得到消息了。但是，怎么样使用定点通知呢？就是说，例如怎么使用其中一个不获取到通知呢？
localhost:3344/actuator/bus-refresh/config-client:3355
上面，只通知 spring.application-name = config-client with 3355 port
========================================================================================================================

服务调用:
1, Ribbon ===> Continue update
2, LoadBalancer

服务调用2:
1, Feign ===> Stop update
2, OpenFeign

服务降级
1, Hystrix ===> Stop update
2, resilience4j
3, Alibaba Sentinel

服务网关
1, Zuul ===> Stop update
2, Zuul2 ===> Stop
3, Gateway 主流和重点 Spring 推荐

服务的配置
1, Config ===> Stop
2, Apolo 携程的
3, Nacos

服务总线
1, Bus ===> Stop
2, Nacos
